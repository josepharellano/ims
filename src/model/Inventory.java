/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package model;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;


/**
 *
 * @author Joseph
 */
public class Inventory {
    private final static ObservableList<Part> allParts;
    private final static ObservableList<Product> allProducts;


    static {
        allParts = FXCollections.observableArrayList();
        allProducts = FXCollections.observableArrayList();
      
    }
  
    public static void addPart(Part newPart){   
        //Add part to allParts
        allParts.add(newPart);
    }
    
    public static void addProduct(Product newProduct){
        //Add product to allProducts
        allProducts.add(newProduct);
    }
    
    public static Part lookupPart(int partId){
        Integer index = binarySearch(0,allParts.size(),partId,allParts);
        
        if(index >= 0){
            return allParts.get(index);
        }
        return null;
    }
    
    public static Product lookupProduct(int productId){
        Integer index = binarySearch(0,allProducts.size(),productId,allParts);
    
        if(index >= 0){
            return allProducts.get(index);
        }
        return null;
    }
    
    //Ask instructor: If the UML is wrong for the return types on the following
    public static Part lookupPart(String partName){
        Integer foundIndex = unorderedSearch(partName,allParts);
        if(foundIndex != null){
            return allParts.get(foundIndex);
        }
        return null;
    }
    public static Product lookupProduct(String productName){
        Integer foundIndex = unorderedSearch(productName,allProducts);
        if(foundIndex != null){
            return allProducts.get(foundIndex);
        }
        return null;
    }
    
    public static void updatePart(int index, Part selectedPart){
        allParts.set(index, selectedPart);     
    }
    public static void updateProduct(int index,Product selectedProduct){
        allProducts.set(index,selectedProduct);
    }
    public static void deletePart(Part selectedPart){
        allParts.remove(selectedPart);
        
    }
    public static void deleteProduct(Product selectedProduct){
        allProducts.remove(selectedProduct);
    }
    public static ObservableList<Part> getAllParts(){
        return allParts;
    }
    public static ObservableList<Product> getAllProducts(){
        return allProducts;
    }
    
    public static int GenerateId(){
        int id;
        if(allParts.size() > 0){
            id = allParts.get(allParts.size()-1).getId()+1;
        }else{
            id = 1;
        }
        return id;
    }
    
    //Autogenerated Ids ensure lists are inorder by ID
    private static Integer binarySearch(int beg, int end,int search, ObservableList list){
        int mid = (end - beg) / 2 + beg;
        Method getId;
        
        try{
            getId = list.get(mid).getClass().getMethod("getId");

            Integer id = (Integer)getId.invoke(list.get(mid));

            if(id == search ){
                return mid;
            }
            
            if(search > id){
                return binarySearch(mid,end,search,list);
            }
            
            if(search < id)
            {
                return binarySearch(beg,mid,search,list);
            }
            
            return null;
            
        }catch(NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e){
            return null;
        }     
    }
    
    private static Integer unorderedSearch(String search, ObservableList list){
            for(int index = 0; index < list.size();index++){
                try{
                    Method getName = list.get(index).getClass().getMethod("getName");
                    String name = (String)getName.invoke(list.get(index));
                    if(name.toLowerCase().contains(search.toLowerCase())){
                        return index;
                    }
                }catch(NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e){
                    System.out.println(e.getMessage());
                }
            }
            
            return null;
        }
    
}
